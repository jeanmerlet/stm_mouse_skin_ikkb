import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import sklearn.decomposition
import sklearn.manifold
import scprep
import time
import os
import re
import glob

np.random.seed(888)
random_state = 888

sample_ids_path = '/gpfs/alpine/syb105/proj-shared/Personal/jmerlet/projects/mouse/data/human_ad/reynolds/mesenchymal_count_mtxs/dermis_ids.txt'
matrix_path = '/gpfs/alpine/syb105/proj-shared/Personal/jmerlet/projects/mouse/data/human_ad/reynolds/prrx1_matrices/combined_all_prrx1_pos.tsv'
batch_matrix_path = '/gpfs/alpine/syb105/proj-shared/Personal/jmerlet/projects/mouse/data/human_ad/reynolds/prrx1_matrices/batch_combined_all_prrx1_pos.tsv'

mtx = scprep.io.load_tsv(matrix_path, cell_axis='column')
batch_mtx = scprep.io.load_tsv(batch_matrix_path, cell_axis='column')

# combining the matrices
sample_metadata = pd.read_csv(sample_ids_path, header=0, index_col=None, sep='\t')
sample_ids = sample_metadata.loc[:, 'sample_id'].values.astype(str).tolist()

sample_dirs = []
for sample_id in sample_ids:
    sample_dirs.append(os.path.join(root_mtx_dir, sample_id))

samples = []
for i, d in enumerate(sample_dirs):
    print(i)
    samples.append(scprep.io.load_10X(d, gene_labels='both'))

mtx, labels = scprep.utils.combine_batches(data=samples, batch_labels=sample_ids, append_to_cell_names=True)
del(samples)

# normalization stuff
mtx = scprep.filter.remove_rare_genes(mtx, cutoff=0, min_cells=5)
mtx = scprep.normalize.library_size_normalize(mtx)
mtx = scprep.transform.log(mtx)

# subset to prrx1+ mesenchymal cells
prrx1_iloc = ['PRRX1' in x for x in mtx.columns.values]
prrx1_mtx_idx = mtx.loc[:, prrx1_iloc] > 0
prrx1_mtx = mtx.loc[prrx1_mtx_idx.values, :]

# save matrix for use by R / Seurat for batch effect removal
#mtx = mtx.transpose()
#mtx = mtx.sparse.to_dense()
#out_mtx_path = '/gpfs/alpine/syb105/proj-shared/Personal/jmerlet/projects/mouse/data/human_ad/reynolds/mesenchymal_count_mtxs/combined_human-ad_mtx.tsv'
#mtx.to_csv(out_mtx_path, sep='\t', header=True, index=True)

# batch-corrected Seurat matrix for t-SNE plotting purposes
batch_mtx = pd.read_csv(batch_matrix_path, sep='\t', header=0, index_col=0)
batch_mtx = batch_mtx.transpose()

# subset batch mtx to prrx1+ cells
batch_mtx = batch_mtx.loc[prrx1_mtx_idx.values, :]
        
# t-sne stuff
start = time.time()
pca_operator = sklearn.decomposition.PCA(n_components=100, random_state=random_state)
tsne_operator = sklearn.manifold.TSNE(n_components=2, random_state=random_state)
#Y_tsne = tsne_operator.fit_transform(pca_operator.fit_transform(mtx.values))
Y_tsne = tsne_operator.fit_transform(pca_operator.fit_transform(batch_mtx.values))
end = time.time()
print('Embedded t-SNE in {:.2f} seconds.'.format(end-start))

# plot clusters onto t-SNE
clusters = pd.read_csv(clusters_path, sep='\t', index_col=0, header=None)
labels = []
for bc in mtx.index.values:
    labels.append(clusters.loc[bc].values[0])

cmap = None

fig, ax = plt.subplots(figsize=(12, 8))
scprep.plot.scatter2d(Y_tsne, label_prefix='t-SNE', title='KNN Clusters', legend_anchor=(1, 1),
                      c=labels, ticks=False, cmap=cmap, ax=ax, s=10, fontsize=14, discrete=True)
plt.tight_layout()
out_path = '/gpfs/alpine/syb105/proj-shared/Personal/jmerlet/projects/mouse/data/human_ad/reynolds/plots/clusters_20dim.png'
plt.savefig(out_path, dpi=300)

# plot by healthy vs. AD
# healthy are all fibroblasts, AD is CD45-
cmap = ['dodgerblue', 'lightcoral']

labels = []
sample_metadata = sample_metadata.set_index('sample_id')
#for bc in mtx.index.values:
for bc in prrx1_mtx.index.values:
    acc_id = re.search('_(.*)$', bc).groups()[0]
    labels.append(sample_metadata.loc[acc_id].values[0])

fig, ax = plt.subplots(figsize=(8, 8))
scprep.plot.scatter2d(Y_tsne, label_prefix='t-SNE', title=f'PRRX1+ Mesenchymal Cells by Condition',
                      c=labels, ticks=False, cmap=cmap, ax=ax, s=8, fontsize=14, discrete=True)#, alpha=0.5)
plt.tight_layout()
out_path = f'/gpfs/alpine/syb105/proj-shared/Personal/jmerlet/projects/mouse/data/human_ad/reynolds/plots/reynolds_prrx1_pos_condition.pdf'
#plt.savefig(out_path, dpi=300)
plt.savefig(out_path)
plt.clf()

# plot individual genes from a list onto t-SNE
cmap = ['dodgerblue', 'lightcoral']
genes = ['ACTA2', 'MCAM', 'CCL11', 'CCL26', 'CEBPB', 'PRRX1', 'DCN', 'PDGFRA', 'COL1A2', 'COL3A1']

# for kang
cmap = ['mediumblue', 'white', 'red']
genes = ['CCL26', 'CCL11', 'CEBPB ']

for gene in genes:
    gene_idx = mtx.columns.str.contains(gene)
    bcs = mtx.loc[:, gene_idx]
    bcs = bcs.iloc[:, 0]
    bcs = bcs[bcs > 0].index.values
    #labels = []
    labels = prrx1_mtx.loc[:, prrx1_mtx.columns.str.contains(gene)]
    print(labels)
    for bc in mtx.index.values:
        break
        if bc in bcs:
            labels.append(f'{gene}_pos')
        else:
            labels.append(f'{gene}_neg')
    fig, ax = plt.subplots(figsize=(10, 8))
    scprep.plot.scatter2d(Y_tsne, label_prefix='t-SNE', title=f'{gene} in PRRX1+ Mesenchymal Cells',
                          c=labels, ticks=False, cmap=cmap, ax=ax, s=8, fontsize=14)
    plt.tight_layout()
    out_path = f'/gpfs/alpine/syb105/proj-shared/Personal/jmerlet/projects/mouse/data/human_ad/reynolds/plots/reynolds_prrx1_pos_{gene}.pdf'
    #plt.savefig(out_path, dpi=300)
    plt.savefig(out_path)
    plt.clf()
